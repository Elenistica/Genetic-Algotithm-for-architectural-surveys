;------------------------- Variables -------------------------
extensions [csv]


;Familias de agentes en el modelo.
breed [vertices vertice]
breed [recorredores recorredor]
breed [fachadas fachada]
breed [observadores observador]
breed [individuos individuo]

;Propiedades de los vértices (esquinas que definen la fachada del edificio).
vertices-own[
  etiqueta
]

;Propiedades de los recorredores (agentes que recorren la fachada del edificio).
recorredores-own[
  origen
  angulo-incidencia
  patch-inicio
  patch-fin
]

;Propiedades de la fachada (agentes tipo link que se definen entre dos agentes tipo vértice).
fachadas-own[
  orientacion-cono
]

;Propiedades de los observadores (agentes que ven desde fuera del edificio la fachada del mismo).
observadores-own[
  numero-paramentos
  angulo-minimo
]

;Propiedades de los individuos (agentes que representa una solución del problema, con un conjunto de posiciones correspondientes a los observadores y
;una lista que indican si estan activados o no).
individuos-own
[
  ;Genes
  lista-observadores
  lista-activaciones

  ;Propiedades
  fitness
]

;Propiedades del suelo en el modelo.
patches-own[
  interior
  vertice-encima
  valor-observado
  recorredorVisto
  recorredores-vistos
]

;Variables globales del modelo.
globals[
  pulsado
  etiqueta-global
  clock
  poder-mover
  grafo-finalizado
  contador-recorredores
  contador-recorredores-vistos
  numero-observadores ;El numero de observadores determina la longitud de los genes de cada individuo.
  csv
  point-list
]

;------------------------- Limpiar mundo -------------------------

;Método para limpiar el mundo.
to borrar-todo

__clear-all-and-reset-ticks
set contador-recorredores 0
set contador-recorredores-vistos 0

ask patches
[
  set vertice-encima false
]

set grafo-finalizado false
reset-timer

end

;------------------------- Planta del edificio -------------------------

to crear-mapa
  import-pcolors-rgb "mapa.png"
  ;ask patches with [pcolor != [255 255 255]] [
  ;set tipo 1
  ;]
end


;------------------------- Modo manual -------------------------

;Método para dibujar los vértices con el ratón.
to dibuja-vertices

if mouse-inside? and mouse-down? != pulsado
[
  ifelse grafo-finalizado = false
  [
    let m-xcor mouse-xcor
    let m-ycor mouse-ycor

aerodinamico m-xcor m-ycor

  ][
  user-message( "No se puede modificar el grafo una vez finalizado." )
 ]
]
 set pulsado mouse-down?

end

to aerodinamico [punto-xcor punto-ycor]
 ask patch punto-xcor punto-ycor
    [
      if vertice-encima = false
      [
        sprout-vertices 1
        [
          set shape "circle"
          set color green
          set label-color white
          set size 3
          set etiqueta who
          set etiqueta-global who
        ]
        crear-arista-anterior
        ver-etiquetas
        set vertice-encima true
      ]
    ]
end

;Método para crear aristas entre los distintos vértices pero siempre con el anterior.
to crear-arista-anterior

if etiqueta-global != 0
  [
    ask vertices with[etiqueta = etiqueta-global]
    [
      create-link-with one-of other vertices with[etiqueta = etiqueta-global - 1]
    ]
  ]
end

;Método para mostrar las etiquetas de los nodos
to ver-etiquetas
 ask vertices
 [
  set label who
  set label-color white
 ]
end

;Método para calcular las etiquetas del vecino.
to-report calcular-etiqueta-vecino [etiq]
  report (etiq + 1) mod (etiqueta-global + 1)
end

;Método para cerrar el grafo, conecta el último vértice con el cero.
to cerrar-grafo
  ifelse(etiqueta-global < 2)
  [
    user-message( "No puede existir un modelo con menos de tres vértices." )
  ]
  [
    ifelse grafo-finalizado = false
    [
      ask vertices[
        if etiqueta = 0[
          create-link-with one-of other vertices with[etiqueta = etiqueta-global]
        ]
      ]
    ]
    [
      user-message( "No se puede modificar el grafo una vez finalizado." )
    ]
  ]
end

;Método para poder mover el grafo por el entorno.
to mover-grafo

 if mouse-down?
 [
   ifelse grafo-finalizado = false
  [
  let grabbed min-one-of vertices [distancexy mouse-xcor mouse-ycor]

  while [mouse-down?]
  [
   ask grabbed [ setxy mouse-xcor mouse-ycor ]
   display
  ]
  ][
  user-message( "No se puede modificar el grafo una vez finalizado." )
  ]
 ]

end

;Método para terminar el grafo y dejarlo definitivo y coloreado.
to finalizar-grafo
  ifelse(etiqueta-global < 2)
  [
    user-message( "No puede existir un modelo con menos de tres vértices." )
  ]
  [
    ifelse grafo-finalizado = false
    [

      let angulo 0
      ask vertices
      [
        hatch 1
        [
          let etiqueta-vecino calcular-etiqueta-vecino etiqueta
          let vecino vertice etiqueta-vecino
          face vecino

          while [(distance vecino) > 0.5]
          [
            ask patch xcor ycor
            [
              if (pcolor != orange) [set pcolor orange ask neighbors [set pcolor orange]]
              sprout-recorredores 1
              [
                setxy xcor ycor
                face vecino
                set contador-recorredores contador-recorredores + 1
                set color orange
                ask patch-right-and-ahead 90 1
                [
                  if pcolor = black [set pcolor white]
                ]
                rt -90
              ]
            ]
          fd 0.5
          ]
          die
        ]
      ]
      colorea-interior

      set grafo-finalizado true
    ]
    [
      user-message( "No se puede modificar el grafo una vez finalizado." )
    ]
  ]
end

;Método para colorear el interior del grafo.
to colorea-interior
  while [any? patches with [pcolor = white and any? neighbors4 with [pcolor = black]]]
  [
    ask patches with [pcolor = white and any? neighbors4 with [pcolor = black]]
    [
      ask neighbors4 with [pcolor = black] [set pcolor white]
    ]
  ]
end

;Método para conocer los recorredores del patch.
to recorredor-del-patch
  if mouse-inside? and mouse-down? != pulsado
  [
    ask patch mouse-xcor mouse-ycor
    [
      if((is-list? recorredores-vistos) and (length recorredores-vistos > 0))
      [
        sprout-observadores 1
        [
          setxy xcor ycor
          set color red
          set size 3
          set shape "circle"
        ]



      foreach recorredores-vistos
      [ [?1] ->
        ask recorredor ?1
        [
          set color blue - 1
          set shape "circle"
          set size 2
        ]
      ]

      set contador-recorredores-vistos (count recorredores with [color = blue - 1])
      ;output-show(word  " Coordenadas :"  mouse-xcor "," mouse-ycor)
      ]
      wait .2
    ]
  ]
 set pulsado mouse-down?
end

;Método para borrar los observadores.
to anula-recorredor-del-patch

    ask observadores [die]
    ask recorredores [set color orange]
    set contador-recorredores-vistos 0
    clear-output

end

;Método para dibujar los patches del foco.
to colorea-patches
;  ask patches with [valor-observado > 0]  [
;    set pcolor 89.9 - (valor-observado / 20)]

  let maximo-valor-observado 0

  ask max-one-of patches [valor-observado]
  [
    set maximo-valor-observado valor-observado
  ]

  ask patches with [valor-observado > 0]
  [
    set pcolor (9.9 * (valor-observado / (maximo-valor-observado + 1)))
  ]

end

;------------------------- Modo automático -------------------------

;Método para generar el grafo el grafo.
to auto-genera-grafo
  __clear-all-and-reset-ticks
  set contador-recorredores 0
  set contador-recorredores-vistos 0
  reset-timer
   ask patches[
   set vertice-encima false
   ]
  set grafo-finalizado false

  repeat numero-vertices [
  let m-xcor random-xcor
  let m-ycor random-ycor

   ask patch m-xcor m-ycor
   [
     if vertice-encima = false
     [
       sprout-vertices 1
       [
         set shape "circle"
         set color green
         set label-color white
         set size 3
         set etiqueta who
         set etiqueta-global who
       ]
      crear-arista-anterior
      ver-etiquetas
      set vertice-encima true
    ]
   ]
  ]

  cerrar-grafo

 ;Controlamos la apertura y dispersión del grafo en la visualización.
 repeat 5 [ layout-spring vertices links 0.2 (sqrt numero-vertices) / numero-vertices 1 ]
 ask vertices [set label who]
end

;------------------------- Parámetros -------------------------

;Método para generar los observadores en el entorno.

to-report genera-posicion-aleatoria-correcta
  let lista-retorno []
  ask one-of patches with[(is-list? recorredores-vistos) and (length recorredores-vistos > 0)]
  [
   set lista-retorno (list pxcor pycor)
  ]

  report lista-retorno
end
to crea-observadores

  selecciona-numero-observadores

  create-observadores numero-observadores
  [
    let coordenadas genera-posicion-aleatoria-correcta
    let xtemp item 0 coordenadas
    let ytemp item 1 coordenadas

    setxy xtemp ytemp
    set shape "square"
    set color red
    set label-color yellow
    set size 5
  ]




;  ask observadores
;  [ ask patches in-radius distancia-maxima
;      [ set pcolor yellow
;        set valor-observado valor-observado + 1 ] ]
;
;
;  ask observadores
;  [ ask patches in-radius distancia-minima
;      [ set pcolor green
;        set valor-observado valor-observado + 1 ] ]




end

;Método para seleccionar el número de observadores.
to selecciona-numero-observadores


let numero-observadores-aristas 0
let numero-observadores-trig-rmax 0
let numero-observadores-trig-deg 0

set numero-observadores-aristas (ceiling ((etiqueta-global + 1) / 2)) + 1

set numero-observadores-trig-rmax (ceiling ((contador-recorredores * sqrt(2)) / (2 * (sqrt((distancia-maxima) ^ 2 - (distancia-minima) ^ 2 )))))

set numero-observadores-trig-deg (ceiling ((contador-recorredores * sqrt(2)) / (2 * ((distancia-minima / tan(20))))))




let numero-observadores-list []

set numero-observadores-list  (list numero-observadores-aristas numero-observadores-trig-rmax)

set numero-observadores max numero-observadores-list


;show numero-observadores-aristas
;show numero-observadores-trig-rmax
;show numero-observadores-trig-deg
;show numero-observadores-list
;show numero-observadores


end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BEGIN MAGIA NEGRA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Procedimieneto de tortuga
; Devuelve los patches visibles en el cono de radio y ángulo especificado
; y que no estén ocultos por la lista de Segmentos
to-report patches-visible-in-cone [radius angle Segments]
  report patches in-cone radius angle with [pcolor = black and is-visible? Segments]
end

; Funciones de cálculo de intersección de dos segmentos
; Ver: http://bryceboe.com/2006/10/23/line-segment-intersection-algorithm/
; A B C D son tortugas, y se mira si el semengo AB corta al CD

to-report ccw [A B C]
  let A.x [xcor] of A
  let A.y [ycor] of A
  let B.x [xcor] of B
  let B.y [ycor] of B
  let C.x [xcor] of C
  let C.y [ycor] of C
  report ((C.y - A.y) * (B.x - A.x)) > ((B.y - A.y) * (C.x - A.x))
end

to-report intersect [S C D]
  let A [end1] of S
  let B [end2] of S
  report (ccw A C D) != (ccw B C D) and (ccw A B C) != (ccw A B D)
end

to-report is-visible? [Segments]
  ; ob contendrá una tortuga temporal sobre el patch actual
  let ob 0
  sprout 1 [
    set ob self
  ]
  ; res contendrá la respuesta final
  let res false
  ; Para cada segmento se mira si la recta de visión desde el vigilante
  ; (myself) hasta el patch actual (ob) no lo intersecta. Finalmente,
  ; hacemos el and de todas esas respuestas parciales
  if reduce and map [ [?1] -> not intersect ?1 myself ob ] Segments
    [ set res true ]
  ; Matamos la tortuga temporal
  ask ob [die]
  ; Devolvemos la respuesta
  report res
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; END MAGIA NEGRA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Método para activar los focos de los observadores.
to enciende-focos
    ask patches with [pcolor != orange and pcolor != white]
  [  set pcolor black
     set recorredores-vistos [] ]

  ask recorredores
  [
    let idrecorredor who


;    sprout 1[
;      head 90
;      if(pcolor != orange and pcolor != white)[
;        fd 1
;        ]



 ;     ]

    ask recorredores
    [
      forward 1
    ]

    ;ask patches in-cone distancia-maxima 140 with [pcolor = black]
    ;ask patches-visible-in-cone distancia-maxima 140 (sort links)
    ask patches-visible-in-cone distancia-maxima (2 * angulo-max-incidencia) (sort links)
    [
      set valor-observado valor-observado + 1
      set recorredorVisto idrecorredor
      set recorredores-vistos lput recorredorVisto recorredores-vistos
    ]

    ask recorredores
    [
      forward -1
    ]
  ]
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;Re-comprobar que los patches marcados son los correctos.

  ;  ask patches with [pcolor != orange and pcolor != white and valor-observado > 0]
;    ask patches with [valor-observado > 0]
;    [
;      let lista-recorredores-temp []
;
;      foreach recorredores-vistos
;      [
;        let current-recorredor turtle ?
;
;        if(is-visible? (sort links) current-recorredor)
;        [
;          set lista-recorredores-temp lput ? lista-recorredores-temp
;        ]
;      ]


;      foreach recorredores-vistos
;      [
;        sprout 1
;        [
;;          set size 3
;;          let encontrado false
;;          ;let current-patch patch ([xcor] of turtle ?) ([ycor] of turtle ?)
;;          face turtle ?
;;          while [not encontrado]
;;          [
;;            if (pcolor = orange or pcolor = white)
;;            [
;;              set encontrado true
;;            ]
;;            fd 0.1
;;          ]
;;
;;          if((distance patch ([xcor] of turtle ?) ([ycor] of turtle ?)) <= 3 * sqrt(2))
;;          [
;;            set lista-recorredores-temp lput ? lista-recorredores-temp
;;          ]
;
;          if(is-visible? (sort links))
;          [
;            set lista-recorredores-temp lput self lista-recorredores-temp
;          ]
;
;          die
;        ]
;
;      ]

;      set recorredores-vistos lista-recorredores-temp
;     ; show ((length recorredores-vistos) - (length lista-recorredores-temp))
;    ]

;
;;sprout recorredorvisto[
;
;
;;  ]
;
;
;
;
;
;    ]



;patches-own[
;  interior
;  vertice-encima
;  valor-observado
;  recorredorVisto
;  recorredores-vistos
;]
;
;
;while [(distance vecino) > 0.5]
;          [
;            ask patch xcor ycor
;            [
;              if (pcolor != orange) [set pcolor orange ask neighbors [set pcolor orange]]
;              sprout-recorredores 1
;              [
;                setxy xcor ycor
;                face vecino
;                set contador-recorredores contador-recorredores + 1
;                set color orange
;                ask patch-right-and-ahead 90 1
;                [
;                  if pcolor = black [set pcolor white]
;                ]
;                rt -90
;              ]
;            ]
;          fd 0.5
;          ]

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



  colorea-patches

end



;to funcion-fitness
;
;  comprueba-parejos
;
;  let numero-fachadas-vigiladas
;  ask obervadores
;  [
;  numero-fachadas-vigiladas =
;  ]
;  let observadores-activos
;  let cantidad-observadores-parejos ;Que vea mínimo a dos observadores.
;  let cantidad-de-observadores-cumplen-angulos
;
;
;
;
;end
;
;to comprueba parejos
;
;
;
;end


;------------------------- Algoritmo genético -------------------------

; La funcion inicializa-genetico inicializa el algoritmo genetico, borrando todos los individuos y creando una poblacion aleatoria
to inicializar-genetico
  reset-ticks
  reset-timer
  ask individuos
  [
   die
  ]

  grabar-individuos-titulo

  selecciona-numero-observadores

  ; Genera la poblacion aleatoria
  create-individuos numero-individuos-poblacion
  [
    genera-individuo-aleatorio
    calcular-fitness
    hide-turtle
  ]

  ask observadores[die]

  ask recorredores
  [
    set color orange
  ]

end

; Ejecuta un paso del algoritmo genetico
to iteracion-genetica
  crea-nueva-generacion
  mata-individuos
  tick
  set clock timer
  grabar-individuos

  ask observadores[die]
  ask recorredores
  [
    set color orange
  ]


  let mejor max-one-of individuos [fitness]
  ask mejor
  [
    let observadores-activados map last filter [ [?1] -> first ?1 = 1 ] (map list lista-activaciones lista-observadores)
    foreach observadores-activados
    [ [?1] ->
      let posicion-x item 0 ?1
      let posicion-y item 1 ?1

      hatch-observadores 1
      [
       setxy posicion-x posicion-y
       set shape "square"
       set color red
       set label-color yellow
       set size 5
       show-turtle

 ;      sprout-observadores 1 [setxy xcor ycor set color red set size 3 set shape "circle"]
       foreach recorredores-vistos [ [??1] ->
         ask recorredor ??1 [
           set color blue - 1
           set shape "circle"
           set size 2

         ]
       ]
       set contador-recorredores-vistos (count recorredores with [color = blue - 1])
      ]
    ]
]

end

; Genera un individuo aleatorio
to genera-individuo-aleatorio
  set lista-observadores n-values numero-observadores [genera-posicion-aleatoria-correcta]
  set lista-activaciones n-values numero-observadores [random 2]
end

; :D
to-report list-intersect [a b]
   report (filter [ [?1] -> member? ?1 b ] a)
end

; Calcula el fitness para un individuo
to calcular-fitness
  let observadores-activados map last filter [ [?1] -> first ?1 = 1 ] (map list lista-activaciones lista-observadores)

  let todos-los-observadores []
  let min-observadores 99999999
  let max-solapamiento 0
  foreach observadores-activados
  [ [?1] ->
    let posicion-x item 0 ?1
    let posicion-y item 1 ?1
    ask patch posicion-x posicion-y
    [
     set todos-los-observadores (sentence todos-los-observadores recorredores-vistos)
     set min-observadores (min (list min-observadores (length recorredores-vistos)))
    ]

;    foreach observadores-activados
;    [
;      let posicion-x-2 item 0 ?
;      let posicion-y-2 item 1 ?
;
;      let lista-1 [recorredores-vistos] of patch posicion-x posicion-y
;      let lista-2 [recorredores-vistos] of patch posicion-x-2 posicion-y-2
;
;      let len (length reduce list-intersect (list lista-1 lista-2))
;
;      set max-solapamiento max (list max-solapamiento len)
;    ]
  ]

  let observadores-sin-repeticion (remove-duplicates todos-los-observadores)
  set fitness (length observadores-sin-repeticion) - 10 * (length observadores-activados) +  min-observadores
end

; Crea la siguiente generacion
to crea-nueva-generacion
  let generacion-anterior individuos with [true]
  let numero-cruces max list 2 (numero-individuos-poblacion * porcentaje-padres * 0.01 / 2)

  ; Realiza los cruces
  repeat numero-cruces
  [
    let padre-1 max-one-of (n-of 4 generacion-anterior) [fitness]
    let padre-2 max-one-of (n-of 4 generacion-anterior) [fitness]

    crea-hijos padre-1 padre-2
  ]
end

to crea-hijos [padre-1 padre-2]
  ; Selecciona un punto de corte aleatorio
  let punto-corte 1 + random (numero-observadores - 1)

  ; Crea los observadores y las activaciones de los hijos
  let hijo-1-observadores (sentence (sublist ([lista-observadores] of padre-1) 0 punto-corte) (sublist ([lista-observadores] of padre-2) punto-corte numero-observadores))
  let hijo-2-observadores (sentence (sublist ([lista-observadores] of padre-2) 0 punto-corte) (sublist ([lista-observadores] of padre-1) punto-corte numero-observadores))

  let hijo-1-activaciones (sentence (sublist ([lista-activaciones] of padre-1) 0 punto-corte) (sublist ([lista-activaciones] of padre-2) punto-corte numero-observadores))
  let hijo-2-activaciones (sentence (sublist ([lista-activaciones] of padre-2) 0 punto-corte) (sublist ([lista-activaciones] of padre-1) punto-corte numero-observadores))

  ; Mutacion
  set hijo-1-observadores (muta-observadores hijo-1-observadores)
  set hijo-2-observadores (muta-observadores hijo-2-observadores)

  set hijo-1-activaciones (muta-activaciones hijo-1-activaciones)
  set hijo-2-activaciones (muta-activaciones hijo-2-activaciones)

  ; Crear hijos
  create-individuos 1
  [
    hide-turtle
    set lista-observadores hijo-1-observadores
    set lista-activaciones hijo-1-activaciones
    calcular-fitness
  ]

  create-individuos 1
  [
    hide-turtle
    set lista-observadores hijo-2-observadores
    set lista-activaciones hijo-2-activaciones
    calcular-fitness
  ]
end


to-report muta-observadores [obs]
  let nuevas-observadores (map [ [?1] -> ifelse-value (random-float 1 < probabilidad-mutacion-gen) [genera-posicion-aleatoria-correcta] [?1] ] obs)
  report nuevas-observadores
end

to-report muta-activaciones [act]
  let nuevas-activaciones (map [ [?1] -> ifelse-value (random-float 1 < probabilidad-mutacion-gen) [1 - ?1] [?1] ] act)
  report nuevas-activaciones
end

; Mata a los individuos con un fitness peor
to mata-individuos
  let numero-individuos (count individuos)
  let numero-muertes (numero-individuos - numero-individuos-poblacion)

  repeat numero-muertes
  [
    ask min-one-of (n-of 4 individuos) [fitness]
    [
     die
    ]
  ]
end


to muestra-mejor-individuo
  let mejor 0
end



;------------------------- Guarda logs -------------------------

;Método para crear el archivo de logs y ponerle título.
to grabar-individuos-titulo

  let nombre-archivo "solucion.csv"

  if file-exists? nombre-archivo
  [
    file-delete nombre-archivo
  ]
  file-open nombre-archivo

  let titulo "FITNESS,ITERACIÓN,TIEMPO"

  foreach n-values numero-observadores [ [?1] -> ?1 ]
  [ [?1] ->
    set titulo (word titulo ",X" (?1 + 1) ",Y" (?1 + 1))
  ]

  file-print titulo
  file-close
end

;Método para rellenar el archivo de logs con los datos del algoritmo genético
to grabar-individuos
  let nombre-archivo "solucion.csv"
  file-open nombre-archivo

  let mejor max-one-of individuos [fitness]
  ask mejor
  [
    let observadores-activados map last filter [ [?1] -> first ?1 = 1 ] (map list lista-activaciones lista-observadores)

    let texto-observadores ""

    foreach observadores-activados
    [ [?1] ->
      set texto-observadores (word texto-observadores "," (item 0 ?1) "," (item 1 ?1))
    ]

    file-print (word fitness "," ticks "," clock texto-observadores)
  ]

  file-close
end

to cargar-csv

 set point-list but-first but-last (csv:from-file nombre-csv ",")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Creando las 3 sublistas a partir de la lista del CSV.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


let point-list-x []
let point-list-y []
let point-list-id []

foreach point-list
    [ [?1] ->
      let temp0 (item 0 ?1)
      let temp1 (item 1 ?1)
      let temp2 (item 2 ?1)
set point-list-x lput temp0 point-list-x
set point-list-y lput temp1 point-list-y
set point-list-id lput temp2 point-list-id
    ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Calculamos los maximos y minimos de la nube de puntos
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 let min-x 999999999999999
 let min-y 999999999999999
 let max-x -999999999999999
 let max-y -999999999999999

 foreach point-list
    [ [?1] ->
      let temp0 (item 0 ?1)
      let temp1 (item 1 ?1)
      set max-x max (list max-x temp0)
      set max-y max (list max-y temp1)
      set min-x min (list min-x temp0)
      set min-y min (list min-y temp1)

    ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Centrando el mundo
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

let centro-x ((min-x + max-x) / 2)
let centro-y ((min-y + max-y) / 2)

let lista-modificada-puntos-centro-x []
let lista-modificada-puntos-centro-y []

 foreach point-list-x
    [ [?1] ->
      set  lista-modificada-puntos-centro-x lput ((?1) + (centro-x * (-1))) lista-modificada-puntos-centro-x
    ]

  foreach point-list-y
    [ [?1] ->
      set  lista-modificada-puntos-centro-y lput ((?1) + (centro-y * (-1))) lista-modificada-puntos-centro-y
    ]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Escalando el mundo
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

let dist-mund-rel-x (max-x - min-x)
let dist-mund-rel-y (max-y - min-y)

let max-mund-anchura (world-width - 1) * 0.8
let max-mund-altura (world-height - 1) * 0.8

let factor-y (max-mund-altura / dist-mund-rel-y)
let factor-x (max-mund-anchura / dist-mund-rel-x)

let min-condicionante min (list (factor-y) (factor-x))

let lista-escalada-puntos-x []
let lista-escalada-puntos-y []
  foreach lista-modificada-puntos-centro-x
    [ [?1] ->
      set lista-escalada-puntos-x lput ((?1) * min-condicionante) lista-escalada-puntos-x
    ]

    foreach lista-modificada-puntos-centro-y
    [ [?1] ->

      set lista-escalada-puntos-y lput ((?1) * min-condicionante) lista-escalada-puntos-y

    ]

let cont 0
let len (length lista-escalada-puntos-x)

while [cont < len]
[
let x-temp item cont lista-escalada-puntos-x
let y-temp item cont lista-escalada-puntos-y

aerodinamico x-temp y-temp

set cont (cont + 1)
]

finalizar-grafo

end
